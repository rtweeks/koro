<T> <k> . </k> <refs> .Map </refs> <extrinsics> SetItem ( "fluff" ) |-> subroutine ( varDecl ( "fluff" : string_type ) , .VarDecls ; .Map ; 1 : yseqToK ( ( yval ( | "?" | "as" ) |-> [ ( yval ( | "?" | "Oro/Core/Flow/Label" ) |-> yval ( | "?" | "nowhere" ) ) , .VarDecls ] yval ( | "?" | "Oro/Core/Subroutine/Define" ) |-> [ ( yval ( | "?" | "argument" ) |-> yval ( | "?" | "gaze at" ) yval ( | "?" | "as" ) |-> yval ( | "?" | "string" ) ) , .VarDecls ] ) , ( ( yval ( | "?" | "gaze at" ) |-> yval ( | "?" | "fluff" ) ) , .VarDecls ) ) ) </extrinsics> <extrinsicScopes> 5 |-> ( SetItem ( "gaze at" ) |-> subroutine ( varDecl ( "gaze at" : string_type ) , .VarDecls ; .Map ; 2 : yseqToK ( ( yval ( | "?" | "Oro/Core/Flow/Label" ) |-> yval ( | "?" | "nowhere" ) ) , .VarDecls ) ) SetItem ( "fluff" ) |-> subroutine ( varDecl ( "fluff" : string_type ) , .VarDecls ; .Map ; 1 : yseqToK ( ( yval ( | "?" | "as" ) |-> [ ( yval ( | "?" | "Oro/Core/Flow/Label" ) |-> yval ( | "?" | "nowhere" ) ) , .VarDecls ] yval ( | "?" | "Oro/Core/Subroutine/Define" ) |-> [ ( yval ( | "?" | "argument" ) |-> yval ( | "?" | "gaze at" ) yval ( | "?" | "as" ) |-> yval ( | "?" | "string" ) ) , .VarDecls ] ) , ( ( yval ( | "?" | "gaze at" ) |-> yval ( | "?" | "fluff" ) ) , .VarDecls ) ) ) ) 1 |-> ( SetItem ( "fluff" ) |-> subroutine ( varDecl ( "fluff" : string_type ) , .VarDecls ; .Map ; 1 : yseqToK ( ( yval ( | "?" | "as" ) |-> [ ( yval ( | "?" | "Oro/Core/Flow/Label" ) |-> yval ( | "?" | "nowhere" ) ) , .VarDecls ] yval ( | "?" | "Oro/Core/Subroutine/Define" ) |-> [ ( yval ( | "?" | "argument" ) |-> yval ( | "?" | "gaze at" ) yval ( | "?" | "as" ) |-> yval ( | "?" | "string" ) ) , .VarDecls ] ) , ( ( yval ( | "?" | "gaze at" ) |-> yval ( | "?" | "fluff" ) ) , .VarDecls ) ) ) ) 2 |-> ( SetItem ( "gaze at" ) |-> subroutine ( varDecl ( "gaze at" : string_type ) , .VarDecls ; .Map ; 2 : yseqToK ( ( yval ( | "?" | "Oro/Core/Flow/Label" ) |-> yval ( | "?" | "nowhere" ) ) , .VarDecls ) ) SetItem ( "fluff" ) |-> subroutine ( varDecl ( "fluff" : string_type ) , .VarDecls ; .Map ; 1 : yseqToK ( ( yval ( | "?" | "as" ) |-> [ ( yval ( | "?" | "Oro/Core/Flow/Label" ) |-> yval ( | "?" | "nowhere" ) ) , .VarDecls ] yval ( | "?" | "Oro/Core/Subroutine/Define" ) |-> [ ( yval ( | "?" | "argument" ) |-> yval ( | "?" | "gaze at" ) yval ( | "?" | "as" ) |-> yval ( | "?" | "string" ) ) , .VarDecls ] ) , ( ( yval ( | "?" | "gaze at" ) |-> yval ( | "?" | "fluff" ) ) , .VarDecls ) ) ) ) </extrinsicScopes> <scopeBin> 3 </scopeBin> <startup> true </startup> <context> <labels> .Map </labels> <env> .Map </env> </context> <globals> .Map </globals> <store> .Map </store> <storeBins> 1 |-> ( 4 , .VarDecls ) 2 |-> ( 7 , .VarDecls ) </storeBins> <arch> wordSize |-> 64 endian |-> little </arch> </T>
